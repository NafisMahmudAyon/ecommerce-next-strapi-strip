{
    namespace: 'wc/v2',
    routes: {
      '/wc/v2': {
        namespace: 'wc/v2',
        methods: [ 'GET' ],
        endpoints: [
          {
            methods: [ 'GET' ],
            args: { namespace: { default: 'wc/v2', required: false }, context: { default: 'view', required: false } }
          }
        ],
        _links: { self: [ { href: 'http://localhost/wp-json/wc/v2' } ] }
      },
      '/wc/v2/coupons': {
        namespace: 'wc/v2',
        methods: [ 'GET', 'POST' ],
        endpoints: [
          {
            methods: [ 'GET' ],
            args: {
              context: {
                description: 'Scope under which the request is made; determines fields present in response.',
                type: 'string',
                enum: [ 'view', 'edit' ],
                default: 'view',
                required: false
              },
              page: {
                description: 'Current page of the collection.',
                type: 'integer',
                default: 1,
                minimum: 1,
                required: false
              },
              per_page: {
                description: 'Maximum number of items to be returned in result set.',
                type: 'integer',
                default: 10,
                minimum: 1,
                maximum: 100,
                required: false
              },
              search: { description: 'Limit results to those matching a string.', type: 'string', required: false },
              after: {
                description: 'Limit response to resources published after a given ISO8601 compliant date.',
                type: 'string',
                format: 'date-time',
                required: false
              },
              before: {
                description: 'Limit response to resources published before a given ISO8601 compliant date.',
                type: 'string',
                format: 'date-time',
                required: false
              },
              modified_after: {
                description: 'Limit response to resources modified after a given ISO8601 compliant date.',
                type: 'string',
                format: 'date-time',
                required: false
              },
              modified_before: {
                description: 'Limit response to resources modified before a given ISO8601 compliant date.',
                type: 'string',
                format: 'date-time',
                required: false
              },
              dates_are_gmt: {
                description: 'Whether to consider GMT post dates when limiting response by published or modified date.',
                type: 'boolean',
                default: false,
                required: false
              },
              exclude: {
                description: 'Ensure result set excludes specific IDs.',
                type: 'array',
                items: { type: 'integer' },
                default: [],
                required: false
              },
              include: {
                description: 'Limit result set to specific ids.',
                type: 'array',
                items: { type: 'integer' },
                default: [],
                required: false
              },
              offset: {
                description: 'Offset the result set by a specific number of items.',
                type: 'integer',
                required: false
              },
              order: {
                description: 'Order sort attribute ascending or descending.',
                type: 'string',
                default: 'desc',
                enum: [ 'asc', 'desc' ],
                required: false
              },
              orderby: {
                description: 'Sort collection by object attribute.',
                type: 'string',
                default: 'date',
                enum: Array(6) [ 'date', 'id', 'include', 'title', 'slug', 'modified' ],
                required: false
              },
              code: {
                description: 'Limit result set to resources with a specific code.',
                type: 'string',
                required: false
              }
            }
          }, {
            methods: [ 'POST' ],
            args: {
              code: { description: 'Coupon code.', type: 'string', required: true },
              amount: {
                description: 'The amount of discount. Should always be numeric, even if setting a percentage.',
                type: 'string',
                required: false
              },
              status: {
                description: 'The status of the coupon. Should always be draft, published, or pending review',
                type: 'string',
                required: false
              },
              discount_type: {
                default: 'fixed_cart',
                description: 'Determines the type of discount that will be applied.',
                type: 'string',
                enum: [ 'percent', 'fixed_cart', 'fixed_product' ],
                required: false
              },
              description: { description: 'Coupon description.', type: 'string', required: false },
              date_expires: {
                description: 'The date the coupon expires, in the site\'s timezone.',
                type: [ 'null', 'string' ],
                required: false
              },
              date_expires_gmt: {
                description: 'The date the coupon expires, as GMT.',
                type: [ 'null', 'string' ],
                required: false
              },
              individual_use: {
                default: false,
                description: 
                  'If true, the coupon can only be used individually. Other applied coupons will be removed from the cart.',
                type: 'boolean',
                required: false
              },
              product_ids: {
                description: 'List of product IDs the coupon can be used on.',
                type: 'array',
                items: { type: 'integer' },
                required: false
              },
              excluded_product_ids: {
                description: 'List of product IDs the coupon cannot be used on.',
                type: 'array',
                items: { type: 'integer' },
                required: false
              },
              usage_limit: {
                description: 'How many times the coupon can be used in total.',
                type: 'integer',
                required: false
              },
              usage_limit_per_user: {
                description: 'How many times the coupon can be used per customer.',
                type: 'integer',
                required: false
              },
              limit_usage_to_x_items: {
                description: 'Max number of items in the cart the coupon can be applied to.',
                type: 'integer',
                required: false
              },
              free_shipping: {
                default: false,
                description: 
                  'If true and if the free shipping method requires a coupon, this coupon will enable free shipping.',
                type: 'boolean',
                required: false
              },
              product_categories: {
                description: 'List of category IDs the coupon applies to.',
                type: 'array',
                items: { type: 'integer' },
                required: false
              },
              excluded_product_categories: {
                description: 'List of category IDs the coupon does not apply to.',
                type: 'array',
                items: { type: 'integer' },
                required: false
              },
              exclude_sale_items: {
                default: false,
                description: 'If true, this coupon will not be applied to items that have sale prices.',
                type: 'boolean',
                required: false
              },
              minimum_amount: {
                description: 'Minimum order amount that needs to be in the cart before coupon applies.',
                type: 'string',
                required: false
              },
              maximum_amount: {
                description: 'Maximum order amount allowed when using the coupon.',
                type: 'string',
                required: false
              },
              email_restrictions: {
                description: 'List of email addresses that can use this coupon.',
                type: 'array',
                items: { type: 'string' },
                required: false
              },
              meta_data: {
                description: 'Meta data.',
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    id: { description: 'Meta ID.', type: 'integer', context: [...], readonly: true },
                    key: { description: 'Meta key.', type: 'string', context: [...] },
                    value: { description: 'Meta value.', type: Array(7) [...], context: [...] }
                  }
                },
                required: false
              }
            }
          },
          
        ],
        _links: { self: [ { href: 'http://localhost/wp-json/wc/v2/coupons' } ] }
      },
      '/wc/v2/coupons/(?P<id>[\\d]+)': {
        namespace: 'wc/v2',
        methods: [ 'GET', 'POST', 'PUT', 'PATCH', 'DELETE' ],
        endpoints: [
          {
            methods: [ 'GET' ],
            args: {
              id: { description: 'Unique identifier for the resource.', type: 'integer', required: false },
              context: {
                description: 'Scope under which the request is made; determines fields present in response.',
                type: 'string',
                enum: [ 'view', 'edit' ],
                default: 'view',
                required: false
              }
            }
          }, {
            methods: [ 'POST', 'PUT', 'PATCH' ],
            args: {
              id: { description: 'Unique identifier for the resource.', type: 'integer', required: false },
              code: { description: 'Coupon code.', type: 'string', required: false },
              amount: {
                description: 'The amount of discount. Should always be numeric, even if setting a percentage.',
                type: 'string',
                required: false
              },
              status: {
                description: 'The status of the coupon. Should always be draft, published, or pending review',
                type: 'string',
                required: false
              },
              discount_type: {
                description: 'Determines the type of discount that will be applied.',
                type: 'string',
                enum: [ 'percent', 'fixed_cart', 'fixed_product' ],
                required: false
              },
              description: { description: 'Coupon description.', type: 'string', required: false },
              date_expires: {
                description: 'The date the coupon expires, in the site\'s timezone.',
                type: [ 'null', 'string' ],
                required: false
              },
              date_expires_gmt: {
                description: 'The date the coupon expires, as GMT.',
                type: [ 'null', 'string' ],
                required: false
              },
              individual_use: {
                description: 
                  'If true, the coupon can only be used individually. Other applied coupons will be removed from the cart.',
                type: 'boolean',
                required: false
              },
              product_ids: {
                description: 'List of product IDs the coupon can be used on.',
                type: 'array',
                items: { type: 'integer' },
                required: false
              },
              excluded_product_ids: {
                description: 'List of product IDs the coupon cannot be used on.',
                type: 'array',
                items: { type: 'integer' },
                required: false
              },
              usage_limit: {
                description: 'How many times the coupon can be used in total.',
                type: 'integer',
                required: false
              },
              usage_limit_per_user: {
                description: 'How many times the coupon can be used per customer.',
                type: 'integer',
                required: false
              },
              limit_usage_to_x_items: {
                description: 'Max number of items in the cart the coupon can be applied to.',
                type: 'integer',
                required: false
              },
              free_shipping: {
                description: 
                  'If true and if the free shipping method requires a coupon, this coupon will enable free shipping.',
                type: 'boolean',
                required: false
              },
              product_categories: {
                description: 'List of category IDs the coupon applies to.',
                type: 'array',
                items: { type: 'integer' },
                required: false
              },
              excluded_product_categories: {
                description: 'List of category IDs the coupon does not apply to.',
                type: 'array',
                items: { type: 'integer' },
                required: false
              },
              exclude_sale_items: {
                description: 'If true, this coupon will not be applied to items that have sale prices.',
                type: 'boolean',
                required: false
              },
              minimum_amount: {
                description: 'Minimum order amount that needs to be in the cart before coupon applies.',
                type: 'string',
                required: false
              },
              maximum_amount: {
                description: 'Maximum order amount allowed when using the coupon.',
                type: 'string',
                required: false
              },
              email_restrictions: {
                description: 'List of email addresses that can use this coupon.',
                type: 'array',
                items: { type: 'string' },
                required: false
              },
              meta_data: {
                description: 'Meta data.',
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    id: { description: 'Meta ID.', type: 'integer', context: [...], readonly: true },
                    key: { description: 'Meta key.', type: 'string', context: [...] },
                    value: { description: 'Meta value.', type: Array(7) [...], context: [...] }
                  }
                },
                required: false
              }
            }
          },
          {
            methods: [ 'DELETE' ],
            args: {
              id: { description: 'Unique identifier for the resource.', type: 'integer', required: false },
              force: {
                default: false,
                type: 'boolean',
                description: 'Whether to bypass trash and force deletion.',
                required: false
              }
            }
          },
          
        ]
      },
      '/wc/v2/coupons/batch': {
        namespace: 'wc/v2',
        methods: [ 'POST', 'PUT', 'PATCH' ],
        endpoints: [
          {
            methods: [ 'POST', 'PUT', 'PATCH' ],
            args: {
              code: { description: 'Coupon code.', type: 'string', required: false },
              amount: {
                description: 'The amount of discount. Should always be numeric, even if setting a percentage.',
                type: 'string',
                required: false
              },
              status: {
                description: 'The status of the coupon. Should always be draft, published, or pending review',
                type: 'string',
                required: false
              },
              discount_type: {
                description: 'Determines the type of discount that will be applied.',
                type: 'string',
                enum: [ 'percent', 'fixed_cart', 'fixed_product' ],
                required: false
              },
              description: { description: 'Coupon description.', type: 'string', required: false },
              date_expires: {
                description: 'The date the coupon expires, in the site\'s timezone.',
                type: [ 'null', 'string' ],
                required: false
              },
              date_expires_gmt: {
                description: 'The date the coupon expires, as GMT.',
                type: [ 'null', 'string' ],
                required: false
              },
              individual_use: {
                description: 
                  'If true, the coupon can only be used individually. Other applied coupons will be removed from the cart.',
                type: 'boolean',
                required: false
              },
              product_ids: {
                description: 'List of product IDs the coupon can be used on.',
                type: 'array',
                items: { type: 'integer' },
                required: false
              },
              excluded_product_ids: {
                description: 'List of product IDs the coupon cannot be used on.',
                type: 'array',
                items: { type: 'integer' },
                required: false
              },
              usage_limit: {
                description: 'How many times the coupon can be used in total.',
                type: 'integer',
                required: false
              },
              usage_limit_per_user: {
                description: 'How many times the coupon can be used per customer.',
                type: 'integer',
                required: false
              },
              limit_usage_to_x_items: {
                description: 'Max number of items in the cart the coupon can be applied to.',
                type: 'integer',
                required: false
              },
              free_shipping: {
                description: 
                  'If true and if the free shipping method requires a coupon, this coupon will enable free shipping.',
                type: 'boolean',
                required: false
              },
              product_categories: {
                description: 'List of category IDs the coupon applies to.',
                type: 'array',
                items: { type: 'integer' },
                required: false
              },
              excluded_product_categories: {
                description: 'List of category IDs the coupon does not apply to.',
                type: 'array',
                items: { type: 'integer' },
                required: false
              },
              exclude_sale_items: {
                description: 'If true, this coupon will not be applied to items that have sale prices.',
                type: 'boolean',
                required: false
              },
              minimum_amount: {
                description: 'Minimum order amount that needs to be in the cart before coupon applies.',
                type: 'string',
                required: false
              },
              maximum_amount: {
                description: 'Maximum order amount allowed when using the coupon.',
                type: 'string',
                required: false
              },
              email_restrictions: {
                description: 'List of email addresses that can use this coupon.',
                type: 'array',
                items: { type: 'string' },
                required: false
              },
              meta_data: {
                description: 'Meta data.',
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    id: { description: 'Meta ID.', type: 'integer', context: [...], readonly: true },
                    key: { description: 'Meta key.', type: 'string', context: [...] },
                    value: { description: 'Meta value.', type: Array(7) [...], context: [...] }
                  }
                },
                required: false
              }
            }
          }
        ],
        _links: { self: [ { href: 'http://localhost/wp-json/wc/v2/coupons/batch' } ] }
      },
      '/wc/v2/customers/(?P<customer_id>[\\d]+)/downloads': {
        namespace: 'wc/v2',
        methods: [ 'GET' ],
        endpoints: [
          {
            methods: [ 'GET' ],
            args: {
              customer_id: { description: 'Unique identifier for the resource.', type: 'integer', required: false },
              context: {
                description: 'Scope under which the request is made; determines fields present in response.',
                type: 'string',
                enum: [ 'view' ],
                default: 'view',
                required: false
              }
            }
          }
        ]
      },
      '/wc/v2/customers': {
        namespace: 'wc/v2',
        methods: [ 'GET', 'POST' ],
        endpoints: [
          {
            methods: [ 'GET' ],
            args: {
              context: {
                description: 'Scope under which the request is made; determines fields present in response.',
                type: 'string',
                enum: [ 'view', 'edit' ],
                default: 'view',
                required: false
              },
              page: {
                description: 'Current page of the collection.',
                type: 'integer',
                default: 1,
                minimum: 1,
                required: false
              },
              per_page: {
                description: 'Maximum number of items to be returned in result set.',
                type: 'integer',
                default: 10,
                minimum: 1,
                maximum: 100,
                required: false
              },
              search: { description: 'Limit results to those matching a string.', type: 'string', required: false },
              exclude: {
                description: 'Ensure result set excludes specific IDs.',
                type: 'array',
                items: { type: 'integer' },
                default: [],
                required: false
              },
              include: {
                description: 'Limit result set to specific IDs.',
                type: 'array',
                items: { type: 'integer' },
                default: [],
                required: false
              },
              offset: {
                description: 'Offset the result set by a specific number of items.',
                type: 'integer',
                required: false
              },
              order: {
                default: 'asc',
                description: 'Order sort attribute ascending or descending.',
                enum: [ 'asc', 'desc' ],
                type: 'string',
                required: false
              },
              orderby: {
                default: 'name',
                description: 'Sort collection by object attribute.',
                enum: [ 'id', 'include', 'name', 'registered_date' ],
                type: 'string',
                required: false
              },
              email: {
                description: 'Limit result set to resources with a specific email.',
                type: 'string',
                format: 'email',
                required: false
              },
              role: {
                description: 'Limit result set to resources with a specific role.',
                type: 'string',
                default: 'customer',
                enum: Array(8) [
                  'all', 'administrator', 'editor', 'author', 'contributor', 'subscriber', 'customer', 'shop_manager'
                ],
                required: false
              }
            }
          }, {
            methods: [ 'POST' ],
            args: {
              email: { type: 'string', description: 'New user email address.', required: true },
              first_name: { description: 'Customer first name.', type: 'string', required: false },
              last_name: { description: 'Customer last name.', type: 'string', required: false },
              username: { description: 'New user username.', type: 'string', required: false },
              password: { description: 'New user password.', type: 'string', required: false },
              billing: {
                description: 'List of billing address data.',
                type: 'object',
                properties: {
                  first_name: { description: 'First name.', type: 'string', context: [ 'view', 'edit' ] },
                  last_name: { description: 'Last name.', type: 'string', context: [ 'view', 'edit' ] },
                  company: { description: 'Company name.', type: 'string', context: [ 'view', 'edit' ] },
                  address_1: { description: 'Address line 1', type: 'string', context: [ 'view', 'edit' ] },
                  address_2: { description: 'Address line 2', type: 'string', context: [ 'view', 'edit' ] },
                  city: { description: 'City name.', type: 'string', context: [ 'view', 'edit' ] },
                  state: {
                    description: 'ISO code or name of the state, province or district.',
                    type: 'string',
                    context: [ 'view', 'edit' ]
                  },
                  postcode: { description: 'Postal code.', type: 'string', context: [ 'view', 'edit' ] },
                  country: { description: 'ISO code of the country.', type: 'string', context: [ 'view', 'edit' ] },
                  email: { description: 'Email address.', type: 'string', format: 'email', context: [ 'view', 'edit' ] },
                  phone: { description: 'Phone number.', type: 'string', context: [ 'view', 'edit' ] }
                },
                required: false
              },
              shipping: {
                description: 'List of shipping address data.',
                type: 'object',
                properties: {
                  first_name: { description: 'First name.', type: 'string', context: [ 'view', 'edit' ] },
                  last_name: { description: 'Last name.', type: 'string', context: [ 'view', 'edit' ] },
                  company: { description: 'Company name.', type: 'string', context: [ 'view', 'edit' ] },
                  address_1: { description: 'Address line 1', type: 'string', context: [ 'view', 'edit' ] },
                  address_2: { description: 'Address line 2', type: 'string', context: [ 'view', 'edit' ] },
                  city: { description: 'City name.', type: 'string', context: [ 'view', 'edit' ] },
                  state: {
                    description: 'ISO code or name of the state, province or district.',
                    type: 'string',
                    context: [ 'view', 'edit' ]
                  },
                  postcode: { description: 'Postal code.', type: 'string', context: [ 'view', 'edit' ] },
                  country: { description: 'ISO code of the country.', type: 'string', context: [ 'view', 'edit' ] }
                },
                required: false
              },
              meta_data: {
                description: 'Meta data.',
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    id: { description: 'Meta ID.', type: 'integer', context: [...], readonly: true },
                    key: { description: 'Meta key.', type: 'string', context: [...] },
                    value: { description: 'Meta value.', type: Array(7) [...], context: [...] }
                  }
                },
                required: false
              }
            }
          },
          
        ],
        _links: { self: [ { href: 'http://localhost/wp-json/wc/v2/customers' } ] }
      },
      '/wc/v2/customers/(?P<id>[\\d]+)': {
        namespace: 'wc/v2',
        methods: [ 'GET', 'POST', 'PUT', 'PATCH', 'DELETE' ],
        endpoints: [
          {
            methods: [ 'GET' ],
            args: {
              id: { description: 'Unique identifier for the resource.', type: 'integer', required: false },
              context: {
                description: 'Scope under which the request is made; determines fields present in response.',
                type: 'string',
                enum: [ 'view', 'edit' ],
                default: 'view',
                required: false
              }
            }
          }, {
            methods: [ 'POST', 'PUT', 'PATCH' ],
            args: {
              id: { description: 'Unique identifier for the resource.', type: 'integer', required: false },
              email: {
                description: 'The email address for the customer.',
                type: 'string',
                format: 'email',
                required: false
              },
              first_name: { description: 'Customer first name.', type: 'string', required: false },
              last_name: { description: 'Customer last name.', type: 'string', required: false },
              username: { description: 'Customer login name.', type: 'string', required: false },
              password: { description: 'Customer password.', type: 'string', required: false },
              billing: {
                description: 'List of billing address data.',
                type: 'object',
                properties: {
                  first_name: { description: 'First name.', type: 'string', context: [ 'view', 'edit' ] },
                  last_name: { description: 'Last name.', type: 'string', context: [ 'view', 'edit' ] },
                  company: { description: 'Company name.', type: 'string', context: [ 'view', 'edit' ] },
                  address_1: { description: 'Address line 1', type: 'string', context: [ 'view', 'edit' ] },
                  address_2: { description: 'Address line 2', type: 'string', context: [ 'view', 'edit' ] },
                  city: { description: 'City name.', type: 'string', context: [ 'view', 'edit' ] },
                  state: {
                    description: 'ISO code or name of the state, province or district.',
                    type: 'string',
                    context: [ 'view', 'edit' ]
                  },
                  postcode: { description: 'Postal code.', type: 'string', context: [ 'view', 'edit' ] },
                  country: { description: 'ISO code of the country.', type: 'string', context: [ 'view', 'edit' ] },
                  email: { description: 'Email address.', type: 'string', format: 'email', context: [ 'view', 'edit' ] },
                  phone: { description: 'Phone number.', type: 'string', context: [ 'view', 'edit' ] }
                },
                required: false
              },
              shipping: {
                description: 'List of shipping address data.',
                type: 'object',
                properties: {
                  first_name: { description: 'First name.', type: 'string', context: [ 'view', 'edit' ] },
                  last_name: { description: 'Last name.', type: 'string', context: [ 'view', 'edit' ] },
                  company: { description: 'Company name.', type: 'string', context: [ 'view', 'edit' ] },
                  address_1: { description: 'Address line 1', type: 'string', context: [ 'view', 'edit' ] },
                  address_2: { description: 'Address line 2', type: 'string', context: [ 'view', 'edit' ] },
                  city: { description: 'City name.', type: 'string', context: [ 'view', 'edit' ] },
                  state: {
                    description: 'ISO code or name of the state, province or district.',
                    type: 'string',
                    context: [ 'view', 'edit' ]
                  },
                  postcode: { description: 'Postal code.', type: 'string', context: [ 'view', 'edit' ] },
                  country: { description: 'ISO code of the country.', type: 'string', context: [ 'view', 'edit' ] }
                },
                required: false
              },
              meta_data: {
                description: 'Meta data.',
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    id: { description: 'Meta ID.', type: 'integer', context: [...], readonly: true },
                    key: { description: 'Meta key.', type: 'string', context: [...] },
                    value: { description: 'Meta value.', type: Array(7) [...], context: [...] }
                  }
                },
                required: false
              }
            }
          },
          {
            methods: [ 'DELETE' ],
            args: {
              id: { description: 'Unique identifier for the resource.', type: 'integer', required: false },
              force: {
                default: false,
                type: 'boolean',
                description: 'Required to be true, as resource does not support trashing.',
                required: false
              },
              reassign: { default: 0, type: 'integer', description: 'ID to reassign posts to.', required: false }
            }
          },
          
        ]
      },
      '/wc/v2/customers/batch': {
        namespace: 'wc/v2',
        methods: [ 'POST', 'PUT', 'PATCH' ],
        endpoints: [
          {
            methods: [ 'POST', 'PUT', 'PATCH' ],
            args: {
              email: {
                description: 'The email address for the customer.',
                type: 'string',
                format: 'email',
                required: false
              },
              first_name: { description: 'Customer first name.', type: 'string', required: false },
              last_name: { description: 'Customer last name.', type: 'string', required: false },
              username: { description: 'Customer login name.', type: 'string', required: false },
              password: { description: 'Customer password.', type: 'string', required: false },
              billing: {
                description: 'List of billing address data.',
                type: 'object',
                properties: {
                  first_name: { description: 'First name.', type: 'string', context: [ 'view', 'edit' ] },
                  last_name: { description: 'Last name.', type: 'string', context: [ 'view', 'edit' ] },
                  company: { description: 'Company name.', type: 'string', context: [ 'view', 'edit' ] },
                  address_1: { description: 'Address line 1', type: 'string', context: [ 'view', 'edit' ] },
                  address_2: { description: 'Address line 2', type: 'string', context: [ 'view', 'edit' ] },
                  city: { description: 'City name.', type: 'string', context: [ 'view', 'edit' ] },
                  state: {
                    description: 'ISO code or name of the state, province or district.',
                    type: 'string',
                    context: [ 'view', 'edit' ]
                  },
                  postcode: { description: 'Postal code.', type: 'string', context: [ 'view', 'edit' ] },
                  country: { description: 'ISO code of the country.', type: 'string', context: [ 'view', 'edit' ] },
                  email: { description: 'Email address.', type: 'string', format: 'email', context: [ 'view', 'edit' ] },
                  phone: { description: 'Phone number.', type: 'string', context: [ 'view', 'edit' ] }
                },
                required: false
              },
              shipping: {
                description: 'List of shipping address data.',
                type: 'object',
                properties: {
                  first_name: { description: 'First name.', type: 'string', context: [ 'view', 'edit' ] },
                  last_name: { description: 'Last name.', type: 'string', context: [ 'view', 'edit' ] },
                  company: { description: 'Company name.', type: 'string', context: [ 'view', 'edit' ] },
                  address_1: { description: 'Address line 1', type: 'string', context: [ 'view', 'edit' ] },
                  address_2: { description: 'Address line 2', type: 'string', context: [ 'view', 'edit' ] },
                  city: { description: 'City name.', type: 'string', context: [ 'view', 'edit' ] },
                  state: {
                    description: 'ISO code or name of the state, province or district.',
                    type: 'string',
                    context: [ 'view', 'edit' ]
                  },
                  postcode: { description: 'Postal code.', type: 'string', context: [ 'view', 'edit' ] },
                  country: { description: 'ISO code of the country.', type: 'string', context: [ 'view', 'edit' ] }
                },
                required: false
              },
              meta_data: {
                description: 'Meta data.',
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    id: { description: 'Meta ID.', type: 'integer', context: [...], readonly: true },
                    key: { description: 'Meta key.', type: 'string', context: [...] },
                    value: { description: 'Meta value.', type: Array(7) [...], context: [...] }
                  }
                },
                required: false
              }
            }
          }
        ],
        _links: { self: [ { href: 'http://localhost/wp-json/wc/v2/customers/batch' } ] }
      },
      '/wc/v2/orders/(?P<order_id>[\\d]+)/notes': {
        namespace: 'wc/v2',
        methods: [ 'GET', 'POST' ],
        endpoints: [
          {
            methods: [ 'GET' ],
            args: {
              order_id: { description: 'The order ID.', type: 'integer', required: false },
              context: {
                description: 'Scope under which the request is made; determines fields present in response.',
                type: 'string',
                enum: [ 'view', 'edit' ],
                default: 'view',
                required: false
              },
              type: {
                default: 'any',
                description: 'Limit result to customers or internal notes.',
                type: 'string',
                enum: [ 'any', 'customer', 'internal' ],
                required: false
              }
            }
          }, {
            methods: [ 'POST' ],
            args: {
              order_id: { description: 'The order ID.', type: 'integer', required: false },
              note: { type: 'string', description: 'Order note content.', required: true },
              customer_note: {
                default: false,
                description: 
                  'If true, the note will be shown to customers and they will be notified. If false, the note will be for admin reference only.',
                type: 'boolean',
                required: false
              }
            }
          },
          
        ]
      },
      '/wc/v2/orders/(?P<order_id>[\\d]+)/notes/(?P<id>[\\d]+)': {
        namespace: 'wc/v2',
        methods: [ 'GET', 'DELETE' ],
        endpoints: [
          {
            methods: [ 'GET' ],
            args: {
              id: { description: 'Unique identifier for the resource.', type: 'integer', required: false },
              order_id: { description: 'The order ID.', type: 'integer', required: false },
              context: {
                description: 'Scope under which the request is made; determines fields present in response.',
                type: 'string',
                enum: [ 'view', 'edit' ],
                default: 'view',
                required: false
              }
            }
          }, {
            methods: [ 'DELETE' ],
            args: {
              id: { description: 'Unique identifier for the resource.', type: 'integer', required: false },
              order_id: { description: 'The order ID.', type: 'integer', required: false },
              force: {
                default: false,
                type: 'boolean',
                description: 'Required to be true, as resource does not support trashing.',
                required: false
              }
            }
          },
          
        ]
      },
      '/wc/v2/orders/(?P<order_id>[\\d]+)/refunds': {
        namespace: 'wc/v2',
        methods: [ 'GET', 'POST' ],
        endpoints: [
          {
            methods: [ 'GET' ],
            args: {
              order_id: { description: 'The order ID.', type: 'integer', required: false },
              context: {
                description: 'Scope under which the request is made; determines fields present in response.',
                type: 'string',
                enum: [ 'view', 'edit' ],
                default: 'view',
                required: false
              },
              page: {
                description: 'Current page of the collection.',
                type: 'integer',
                default: 1,
                minimum: 1,
                required: false
              },
              per_page: {
                description: 'Maximum number of items to be returned in result set.',
                type: 'integer',
                default: 10,
                minimum: 1,
                maximum: 100,
                required: false
              },
              search: { description: 'Limit results to those matching a string.', type: 'string', required: false },
              after: {
                description: 'Limit response to resources published after a given ISO8601 compliant date.',
                type: 'string',
                format: 'date-time',
                required: false
              },
              before: {
                description: 'Limit response to resources published before a given ISO8601 compliant date.',
                type: 'string',
                format: 'date-time',
                required: false
              },
              modified_after: {
                description: 'Limit response to resources modified after a given ISO8601 compliant date.',
                type: 'string',
                format: 'date-time',
                required: false
              },
              modified_before: {
                description: 'Limit response to resources modified before a given ISO8601 compliant date.',
                type: 'string',
                format: 'date-time',
                required: false
              },
              dates_are_gmt: {
                description: 'Whether to consider GMT post dates when limiting response by published or modified date.',
                type: 'boolean',
                default: false,
                required: false
              },
              exclude: {
                description: 'Ensure result set excludes specific IDs.',
                type: 'array',
                items: { type: 'integer' },
                default: [],
                required: false
              },
              include: {
                description: 'Limit result set to specific ids.',
                type: 'array',
                items: { type: 'integer' },
                default: [],
                required: false
              },
              offset: {
                description: 'Offset the result set by a specific number of items.',
                type: 'integer',
                required: false
              },
              order: {
                description: 'Order sort attribute ascending or descending.',
                type: 'string',
                default: 'desc',
                enum: [ 'asc', 'desc' ],
                required: false
              },
              orderby: {
                description: 'Sort collection by object attribute.',
                type: 'string',
                default: 'date',
                enum: Array(6) [ 'date', 'id', 'include', 'title', 'slug', 'modified' ],
                required: false
              },
              parent: {
                description: 'Limit result set to those of particular parent IDs.',
                type: 'array',
                items: { type: 'integer' },
                default: [],
                required: false
              },
              parent_exclude: {
                description: 'Limit result set to all items except those of a particular parent ID.',
                type: 'array',
                items: { type: 'integer' },
                default: [],
                required: false
              },
              dp: {
                default: 2,
                description: 'Number of decimal points to use in each resource.',
                type: 'integer',
                required: false
              },
              order_item_display_meta: {
                default: false,
                description: 'Only show meta which is meant to be displayed for an order.',
                type: 'boolean',
                required: false
              },
              include_meta: {
                default: [],
                description: 'Limit meta_data to specific keys.',
                type: 'array',
                items: { type: 'string' },
                required: false
              },
              exclude_meta: {
                default: [],
                description: 'Ensure meta_data excludes specific keys.',
                type: 'array',
                items: { type: 'string' },
                required: false
              }
            }
          }, {
            methods: [ 'POST' ],
            args: {
              order_id: { description: 'The order ID.', type: 'integer', required: false },
              amount: { description: 'Refund amount.', type: 'string', required: false },
              reason: { description: 'Reason for refund.', type: 'string', required: false },
              refunded_by: { description: 'User ID of user who created the refund.', type: 'integer', required: false },
              meta_data: {
                description: 'Meta data.',
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    id: { description: 'Meta ID.', type: 'integer', context: [...], readonly: true },
                    key: { description: 'Meta key.', type: 'string', context: [...] },
                    value: { description: 'Meta value.', type: Array(7) [...], context: [...] }
                  }
                },
                required: false
              },
              api_refund: {
                default: true,
                description: 'When true, the payment gateway API is used to generate the refund.',
                type: 'boolean',
                required: false
              }
            }
          },
          
        ]
      },
      '/wc/v2/orders/(?P<order_id>[\\d]+)/refunds/(?P<id>[\\d]+)': {
        namespace: 'wc/v2',
        methods: [ 'GET', 'DELETE' ],
        endpoints: [
          {
            methods: [ 'GET' ],
            args: {
              order_id: { description: 'The order ID.', type: 'integer', required: false },
              id: { description: 'Unique identifier for the resource.', type: 'integer', required: false },
              context: {
                description: 'Scope under which the request is made; determines fields present in response.',
                type: 'string',
                enum: [ 'view', 'edit' ],
                default: 'view',
                required: false
              }
            }
          }, {
            methods: [ 'DELETE' ],
            args: {
              order_id: { description: 'The order ID.', type: 'integer', required: false },
              id: { description: 'Unique identifier for the resource.', type: 'integer', required: false },
              force: {
                default: true,
                type: 'boolean',
                description: 'Required to be true, as resource does not support trashing.',
                required: false
              }
            }
          },
          
        ]
      },
      '/wc/v2/orders': {
        namespace: 'wc/v2',
        methods: [ 'GET', 'POST' ],
        endpoints: [
          {
            methods: [ 'GET' ],
            args: {
              context: {
                description: 'Scope under which the request is made; determines fields present in response.',
                type: 'string',
                enum: [ 'view', 'edit' ],
                default: 'view',
                required: false
              },
              page: {
                description: 'Current page of the collection.',
                type: 'integer',
                default: 1,
                minimum: 1,
                required: false
              },
              per_page: {
                description: 'Maximum number of items to be returned in result set.',
                type: 'integer',
                default: 10,
                minimum: 1,
                maximum: 100,
                required: false
              },
              search: { description: 'Limit results to those matching a string.', type: 'string', required: false },
              after: {
                description: 'Limit response to resources published after a given ISO8601 compliant date.',
                type: 'string',
                format: 'date-time',
                required: false
              },
              before: {
                description: 'Limit response to resources published before a given ISO8601 compliant date.',
                type: 'string',
                format: 'date-time',
                required: false
              },
              modified_after: {
                description: 'Limit response to resources modified after a given ISO8601 compliant date.',
                type: 'string',
                format: 'date-time',
                required: false
              },
              modified_before: {
                description: 'Limit response to resources modified before a given ISO8601 compliant date.',
                type: 'string',
                format: 'date-time',
                required: false
              },
              dates_are_gmt: {
                description: 'Whether to consider GMT post dates when limiting response by published or modified date.',
                type: 'boolean',
                default: false,
                required: false
              },
              exclude: {
                description: 'Ensure result set excludes specific IDs.',
                type: 'array',
                items: { type: 'integer' },
                default: [],
                required: false
              },
              include: {
                description: 'Limit result set to specific ids.',
                type: 'array',
                items: { type: 'integer' },
                default: [],
                required: false
              },
              offset: {
                description: 'Offset the result set by a specific number of items.',
                type: 'integer',
                required: false
              },
              order: {
                description: 'Order sort attribute ascending or descending.',
                type: 'string',
                default: 'desc',
                enum: [ 'asc', 'desc' ],
                required: false
              },
              orderby: {
                description: 'Sort collection by object attribute.',
                type: 'string',
                default: 'date',
                enum: Array(6) [ 'date', 'id', 'include', 'title', 'slug', 'modified' ],
                required: false
              },
              parent: {
                description: 'Limit result set to those of particular parent IDs.',
                type: 'array',
                items: { type: 'integer' },
                default: [],
                required: false
              },
              parent_exclude: {
                description: 'Limit result set to all items except those of a particular parent ID.',
                type: 'array',
                items: { type: 'integer' },
                default: [],
                required: false
              },
              status: {
                default: 'any',
                description: 'Limit result set to orders assigned a specific status.',
                type: 'string',
                enum: Array(11) [
                  'any', 'trash', 'auto-draft', 'pending', 'processing', 'on-hold', 'completed', 'cancelled', 'refunded', 'failed',
                  'checkout-draft'
                ],
                required: false
              },
              customer: {
                description: 'Limit result set to orders assigned a specific customer.',
                type: 'integer',
                required: false
              },
              product: {
                description: 'Limit result set to orders assigned a specific product.',
                type: 'integer',
                required: false
              },
              dp: {
                default: 2,
                description: 'Number of decimal points to use in each resource.',
                type: 'integer',
                required: false
              },
              order_item_display_meta: {
                default: false,
                description: 'Only show meta which is meant to be displayed for an order.',
                type: 'boolean',
                required: false
              },
              include_meta: {
                default: [],
                description: 'Limit meta_data to specific keys.',
                type: 'array',
                items: { type: 'string' },
                required: false
              },
              exclude_meta: {
                default: [],
                description: 'Ensure meta_data excludes specific keys.',
                type: 'array',
                items: { type: 'string' },
                required: false
              }
            }
          }, {
            methods: [ 'POST' ],
            args: {
              parent_id: { description: 'Parent order ID.', type: 'integer', required: false },
              status: {
                default: 'pending',
                description: 'Order status.',
                type: 'string',
                enum: Array(9) [
                  'auto-draft', 'pending', 'processing', 'on-hold', 'completed', 'cancelled', 'refunded', 'failed', 'checkout-draft',
                  
                ],
                required: false
              },
              currency: {
                default: 'USD',
                description: 'Currency the order was created with, in ISO format.',
                type: 'string',
                enum: Array(163) [
                  'AED', 'AFN', 'ALL', 'AMD', 'ANG', 'AOA', 'ARS', 'AUD', 'AWG', 'AZN', 'BAM', 'BBD', 'BDT', 'BGN', 'BHD',
                  'BIF', 'BMD', 'BND', 'BOB', 'BRL', 'BSD', 'BTC', 'BTN', 'BWP', 'BYR', 'BYN', 'BZD', 'CAD', 'CDF', 'CHF',
                  'CLP', 'CNY', 'COP', 'CRC', 'CUC', 'CUP', 'CVE', 'CZK', 'DJF', 'DKK', 'DOP', 'DZD', 'EGP', 'ERN', 'ETB',
                  'EUR', 'FJD', 'FKP', 'GBP', 'GEL', 'GGP', 'GHS', 'GIP', 'GMD', 'GNF', 'GTQ', 'GYD', 'HKD', 'HNL', 'HRK',
                  'HTG', 'HUF', 'IDR', 'ILS', 'IMP', 'INR', 'IQD', 'IRR', 'IRT', 'ISK', 'JEP', 'JMD', 'JOD', 'JPY', 'KES',
                  'KGS', 'KHR', 'KMF', 'KPW', 'KRW', 'KWD', 'KYD', 'KZT', 'LAK', 'LBP', 'LKR', 'LRD', 'LSL', 'LYD', 'MAD',
                  'MDL', 'MGA', 'MKD', 'MMK', 'MNT', 'MOP', 'MRU', 'MUR', 'MVR', 'MWK', 
                  ...
                ],
                required: false
              },
              customer_id: {
                default: 0,
                description: 'User ID who owns the order. 0 for guests.',
                type: 'integer',
                required: false
              },
              customer_note: { description: 'Note left by customer during checkout.', type: 'string', required: false },
              billing: {
                description: 'Billing address.',
                type: 'object',
                properties: {
                  first_name: { description: 'First name.', type: 'string', context: [ 'view', 'edit' ] },
                  last_name: { description: 'Last name.', type: 'string', context: [ 'view', 'edit' ] },
                  company: { description: 'Company name.', type: 'string', context: [ 'view', 'edit' ] },
                  address_1: { description: 'Address line 1', type: 'string', context: [ 'view', 'edit' ] },
                  address_2: { description: 'Address line 2', type: 'string', context: [ 'view', 'edit' ] },
                  city: { description: 'City name.', type: 'string', context: [ 'view', 'edit' ] },
                  state: {
                    description: 'ISO code or name of the state, province or district.',
                    type: 'string',
                    context: [ 'view', 'edit' ]
                  },
                  postcode: { description: 'Postal code.', type: 'string', context: [ 'view', 'edit' ] },
                  country: {
                    description: 'Country code in ISO 3166-1 alpha-2 format.',
                    type: 'string',
                    context: [ 'view', 'edit' ]
                  },
                  email: {
                    description: 'Email address.',
                    type: [ 'string', 'null' ],
                    format: 'email',
                    context: [ 'view', 'edit' ]
                  },
                  phone: { description: 'Phone number.', type: 'string', context: [ 'view', 'edit' ] }
                },
                required: false
              },
              shipping: {
                description: 'Shipping address.',
                type: 'object',
                properties: {
                  first_name: { description: 'First name.', type: 'string', context: [ 'view', 'edit' ] },
                  last_name: { description: 'Last name.', type: 'string', context: [ 'view', 'edit' ] },
                  company: { description: 'Company name.', type: 'string', context: [ 'view', 'edit' ] },
                  address_1: { description: 'Address line 1', type: 'string', context: [ 'view', 'edit' ] },
                  address_2: { description: 'Address line 2', type: 'string', context: [ 'view', 'edit' ] },
                  city: { description: 'City name.', type: 'string', context: [ 'view', 'edit' ] },
                  state: {
                    description: 'ISO code or name of the state, province or district.',
                    type: 'string',
                    context: [ 'view', 'edit' ]
                  },
                  postcode: { description: 'Postal code.', type: 'string', context: [ 'view', 'edit' ] },
                  country: {
                    description: 'Country code in ISO 3166-1 alpha-2 format.',
                    type: 'string',
                    context: [ 'view', 'edit' ]
                  }
                },
                required: false
              },
              payment_method: { description: 'Payment method ID.', type: 'string', required: false },
              payment_method_title: { description: 'Payment method title.', type: 'string', required: false },
              transaction_id: { description: 'Unique transaction ID.', type: 'string', required: false },
              meta_data: {
                description: 'Meta data.',
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    id: { description: 'Meta ID.', type: 'integer', context: [...], readonly: true },
                    key: { description: 'Meta key.', type: 'string', context: [...] },
                    value: { description: 'Meta value.', type: Array(7) [...], context: [...] }
                  }
                },
                required: false
              },
              line_items: {
                description: 'Line items data.',
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    id: { description: 'Item ID.', type: 'integer', context: [...], readonly: true },
                    name: { description: 'Product name.', type: Array(7) [...], context: [...] },
                    parent_name: {
                      description: 'Parent product name if the product is a variation.',
                      type: 'string',
                      context: [...]
                    },
                    product_id: { description: 'Product ID.', type: Array(7) [...], context: [...] },
                    variation_id: { description: 'Variation ID, if applicable.', type: 'integer', context: [...] },
                    quantity: { description: 'Quantity ordered.', type: 'integer', context: [...] },
                    tax_class: { description: 'Tax class of product.', type: 'string', context: [...] },
                    subtotal: { description: 'Line subtotal (before discounts).', type: 'string', context: [...] },
                    subtotal_tax: {
                      description: 'Line subtotal tax (before discounts).',
                      type: 'string',
                      context: [...],
                      readonly: true
                    },
                    total: { description: 'Line total (after discounts).', type: 'string', context: [...] },
                    total_tax: {
                      description: 'Line total tax (after discounts).',
                      type: 'string',
                      context: [...],
                      readonly: true
                    },
                    taxes: { description: 'Line taxes.', type: 'array', context: [...], readonly: true, items: {...} },
                    meta_data: { description: 'Meta data.', type: 'array', context: [...], items: {...} },
                    sku: { description: 'Product SKU.', type: 'string', context: [...], readonly: true },
                    price: { description: 'Product price.', type: 'number', context: [...], readonly: true },
                    image: {
                      description: 'Properties of the main product image.',
                      type: 'object',
                      context: [...],
                      readonly: true,
                      properties: {...}
                    }
                  }
                },
                required: false
              },
              shipping_lines: {
                description: 'Shipping lines data.',
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    id: { description: 'Item ID.', type: 'integer', context: [...], readonly: true },
                    method_title: { description: 'Shipping method name.', type: Array(7) [...], context: [...] },
                    method_id: { description: 'Shipping method ID.', type: Array(7) [...], context: [...] },
                    instance_id: { description: 'Shipping instance ID.', type: 'string', context: [...] },
                    total: { description: 'Line total (after discounts).', type: 'string', context: [...] },
                    total_tax: {
                      description: 'Line total tax (after discounts).',
                      type: 'string',
                      context: [...],
                      readonly: true
                    },
                    taxes: { description: 'Line taxes.', type: 'array', context: [...], readonly: true, items: {...} },
                    meta_data: { description: 'Meta data.', type: 'array', context: [...], items: {...} }
                  }
                },
                required: false
              },
              fee_lines: {
                description: 'Fee lines data.',
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    id: { description: 'Item ID.', type: 'integer', context: [...], readonly: true },
                    name: { description: 'Fee name.', type: Array(7) [...], context: [...] },
                    tax_class: { description: 'Tax class of fee.', type: 'string', context: [...] },
                    tax_status: { description: 'Tax status of fee.', type: 'string', context: [...], enum: [...] },
                    total: { description: 'Line total (after discounts).', type: 'string', context: [...] },
                    total_tax: {
                      description: 'Line total tax (after discounts).',
                      type: 'string',
                      context: [...],
                      readonly: true
                    },
                    taxes: { description: 'Line taxes.', type: 'array', context: [...], readonly: true, items: {...} },
                    meta_data: { description: 'Meta data.', type: 'array', context: [...], items: {...} }
                  }
                },
                required: false
              },
              coupon_lines: {
                description: 'Coupons line data.',
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    id: { description: 'Item ID.', type: 'integer', context: [...], readonly: true },
                    code: { description: 'Coupon code.', type: Array(7) [...], context: [...] },
                    discount: { description: 'Discount total.', type: 'string', context: [...] },
                    discount_tax: { description: 'Discount total tax.', type: 'string', context: [...], readonly: true },
                    meta_data: { description: 'Meta data.', type: 'array', context: [...], items: {...} }
                  }
                },
                required: false
              },
              set_paid: {
                default: false,
                description: 'Define if the order is paid. It will set the status to processing and reduce stock items.',
                type: 'boolean',
                required: false
              }
            }
          },
          
        ],
        _links: { self: [ { href: 'http://localhost/wp-json/wc/v2/orders' } ] }
      },
      '/wc/v2/orders/(?P<id>[\\d]+)': {
        namespace: 'wc/v2',
        methods: [ 'GET', 'POST', 'PUT', 'PATCH', 'DELETE' ],
        endpoints: [
          {
            methods: [ 'GET' ],
            args: {
              id: { description: 'Unique identifier for the resource.', type: 'integer', required: false },
              context: {
                description: 'Scope under which the request is made; determines fields present in response.',
                type: 'string',
                enum: [ 'view', 'edit' ],
                default: 'view',
                required: false
              }
            }
          }, {
            methods: [ 'POST', 'PUT', 'PATCH' ],
            args: {
              id: { description: 'Unique identifier for the resource.', type: 'integer', required: false },
              parent_id: { description: 'Parent order ID.', type: 'integer', required: false },
              status: {
                description: 'Order status.',
                type: 'string',
                enum: Array(9) [
                  'auto-draft', 'pending', 'processing', 'on-hold', 'completed', 'cancelled', 'refunded', 'failed', 'checkout-draft',
                  
                ],
                required: false
              },
              currency: {
                description: 'Currency the order was created with, in ISO format.',
                type: 'string',
                enum: Array(163) [
                  'AED', 'AFN', 'ALL', 'AMD', 'ANG', 'AOA', 'ARS', 'AUD', 'AWG', 'AZN', 'BAM', 'BBD', 'BDT', 'BGN', 'BHD',
                  'BIF', 'BMD', 'BND', 'BOB', 'BRL', 'BSD', 'BTC', 'BTN', 'BWP', 'BYR', 'BYN', 'BZD', 'CAD', 'CDF', 'CHF',
                  'CLP', 'CNY', 'COP', 'CRC', 'CUC', 'CUP', 'CVE', 'CZK', 'DJF', 'DKK', 'DOP', 'DZD', 'EGP', 'ERN', 'ETB',
                  'EUR', 'FJD', 'FKP', 'GBP', 'GEL', 'GGP', 'GHS', 'GIP', 'GMD', 'GNF', 'GTQ', 'GYD', 'HKD', 'HNL', 'HRK',
                  'HTG', 'HUF', 'IDR', 'ILS', 'IMP', 'INR', 'IQD', 'IRR', 'IRT', 'ISK', 'JEP', 'JMD', 'JOD', 'JPY', 'KES',
                  'KGS', 'KHR', 'KMF', 'KPW', 'KRW', 'KWD', 'KYD', 'KZT', 'LAK', 'LBP', 'LKR', 'LRD', 'LSL', 'LYD', 'MAD',
                  'MDL', 'MGA', 'MKD', 'MMK', 'MNT', 'MOP', 'MRU', 'MUR', 'MVR', 'MWK', 
                  ...
                ],
                required: false
              },
              customer_id: { description: 'User ID who owns the order. 0 for guests.', type: 'integer', required: false },
              customer_note: { description: 'Note left by customer during checkout.', type: 'string', required: false },
              billing: {
                description: 'Billing address.',
                type: 'object',
                properties: {
                  first_name: { description: 'First name.', type: 'string', context: [ 'view', 'edit' ] },
                  last_name: { description: 'Last name.', type: 'string', context: [ 'view', 'edit' ] },
                  company: { description: 'Company name.', type: 'string', context: [ 'view', 'edit' ] },
                  address_1: { description: 'Address line 1', type: 'string', context: [ 'view', 'edit' ] },
                  address_2: { description: 'Address line 2', type: 'string', context: [ 'view', 'edit' ] },
                  city: { description: 'City name.', type: 'string', context: [ 'view', 'edit' ] },
                  state: {
                    description: 'ISO code or name of the state, province or district.',
                    type: 'string',
                    context: [ 'view', 'edit' ]
                  },
                  postcode: { description: 'Postal code.', type: 'string', context: [ 'view', 'edit' ] },
                  country: {
                    description: 'Country code in ISO 3166-1 alpha-2 format.',
                    type: 'string',
                    context: [ 'view', 'edit' ]
                  },
                  email: {
                    description: 'Email address.',
                    type: [ 'string', 'null' ],
                    format: 'email',
                    context: [ 'view', 'edit' ]
                  },
                  phone: { description: 'Phone number.', type: 'string', context: [ 'view', 'edit' ] }
                },
                required: false
              },
              shipping: {
                description: 'Shipping address.',
                type: 'object',
                properties: {
                  first_name: { description: 'First name.', type: 'string', context: [ 'view', 'edit' ] },
                  last_name: { description: 'Last name.', type: 'string', context: [ 'view', 'edit' ] },
                  company: { description: 'Company name.', type: 'string', context: [ 'view', 'edit' ] },
                  address_1: { description: 'Address line 1', type: 'string', context: [ 'view', 'edit' ] },
                  address_2: { description: 'Address line 2', type: 'string', context: [ 'view', 'edit' ] },
                  city: { description: 'City name.', type: 'string', context: [ 'view', 'edit' ] },
                  state: {
                    description: 'ISO code or name of the state, province or district.',
                    type: 'string',
                    context: [ 'view', 'edit' ]
                  },
                  postcode: { description: 'Postal code.', type: 'string', context: [ 'view', 'edit' ] },
                  country: {
                    description: 'Country code in ISO 3166-1 alpha-2 format.',
                    type: 'string',
                    context: [ 'view', 'edit' ]
                  }
                },
                required: false
              },
              payment_method: { description: 'Payment method ID.', type: 'string', required: false },
              payment_method_title: { description: 'Payment method title.', type: 'string', required: false },
              transaction_id: { description: 'Unique transaction ID.', type: 'string', required: false },
              meta_data: {
                description: 'Meta data.',
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    id: { description: 'Meta ID.', type: 'integer', context: [...], readonly: true },
                    key: { description: 'Meta key.', type: 'string', context: [...] },
                    value: { description: 'Meta value.', type: Array(7) [...], context: [...] }
                  }
                },
                required: false
              },
              line_items: {
                description: 'Line items data.',
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    id: { description: 'Item ID.', type: 'integer', context: [...], readonly: true },
                    name: { description: 'Product name.', type: Array(7) [...], context: [...] },
                    parent_name: {
                      description: 'Parent product name if the product is a variation.',
                      type: 'string',
                      context: [...]
                    },
                    product_id: { description: 'Product ID.', type: Array(7) [...], context: [...] },
                    variation_id: { description: 'Variation ID, if applicable.', type: 'integer', context: [...] },
                    quantity: { description: 'Quantity ordered.', type: 'integer', context: [...] },
                    tax_class: { description: 'Tax class of product.', type: 'string', context: [...] },
                    subtotal: { description: 'Line subtotal (before discounts).', type: 'string', context: [...] },
                    subtotal_tax: {
                      description: 'Line subtotal tax (before discounts).',
                      type: 'string',
                      context: [...],
                      readonly: true
                    },
                    total: { description: 'Line total (after discounts).', type: 'string', context: [...] },
                    total_tax: {
                      description: 'Line total tax (after discounts).',
                      type: 'string',
                      context: [...],
                      readonly: true
                    },
                    taxes: { description: 'Line taxes.', type: 'array', context: [...], readonly: true, items: {...} },
                    meta_data: { description: 'Meta data.', type: 'array', context: [...], items: {...} },
                    sku: { description: 'Product SKU.', type: 'string', context: [...], readonly: true },
                    price: { description: 'Product price.', type: 'number', context: [...], readonly: true },
                    image: {
                      description: 'Properties of the main product image.',
                      type: 'object',
                      context: [...],
                      readonly: true,
                      properties: {...}
                    }
                  }
                },
                required: false
              },
              shipping_lines: {
                description: 'Shipping lines data.',
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    id: { description: 'Item ID.', type: 'integer', context: [...], readonly: true },
                    method_title: { description: 'Shipping method name.', type: Array(7) [...], context: [...] },
                    method_id: { description: 'Shipping method ID.', type: Array(7) [...], context: [...] },
                    instance_id: { description: 'Shipping instance ID.', type: 'string', context: [...] },
                    total: { description: 'Line total (after discounts).', type: 'string', context: [...] },
                    total_tax: {
                      description: 'Line total tax (after discounts).',
                      type: 'string',
                      context: [...],
                      readonly: true
                    },
                    taxes: { description: 'Line taxes.', type: 'array', context: [...], readonly: true, items: {...} },
                    meta_data: { description: 'Meta data.', type: 'array', context: [...], items: {...} }
                  }
                },
                required: false
              },
              fee_lines: {
                description: 'Fee lines data.',
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    id: { description: 'Item ID.', type: 'integer', context: [...], readonly: true },
                    name: { description: 'Fee name.', type: Array(7) [...], context: [...] },
                    tax_class: { description: 'Tax class of fee.', type: 'string', context: [...] },
                    tax_status: { description: 'Tax status of fee.', type: 'string', context: [...], enum: [...] },
                    total: { description: 'Line total (after discounts).', type: 'string', context: [...] },
                    total_tax: {
                      description: 'Line total tax (after discounts).',
                      type: 'string',
                      context: [...],
                      readonly: true
                    },
                    taxes: { description: 'Line taxes.', type: 'array', context: [...], readonly: true, items: {...} },
                    meta_data: { description: 'Meta data.', type: 'array', context: [...], items: {...} }
                  }
                },
                required: false
              },
              coupon_lines: {
                description: 'Coupons line data.',
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    id: { description: 'Item ID.', type: 'integer', context: [...], readonly: true },
                    code: { description: 'Coupon code.', type: Array(7) [...], context: [...] },
                    discount: { description: 'Discount total.', type: 'string', context: [...] },
                    discount_tax: { description: 'Discount total tax.', type: 'string', context: [...], readonly: true },
                    meta_data: { description: 'Meta data.', type: 'array', context: [...], items: {...} }
                  }
                },
                required: false
              },
              set_paid: {
                description: 'Define if the order is paid. It will set the status to processing and reduce stock items.',
                type: 'boolean',
                required: false
              }
            }
          },
          {
            methods: [ 'DELETE' ],
            args: {
              id: { description: 'Unique identifier for the resource.', type: 'integer', required: false },
              force: {
                default: false,
                type: 'boolean',
                description: 'Whether to bypass trash and force deletion.',
                required: false
              }
            }
          },
          
        ]
      },
      '/wc/v2/orders/batch': {
        namespace: 'wc/v2',
        methods: [ 'POST', 'PUT', 'PATCH' ],
        endpoints: [
          {
            methods: [ 'POST', 'PUT', 'PATCH' ],
            args: {
              parent_id: { description: 'Parent order ID.', type: 'integer', required: false },
              status: {
                description: 'Order status.',
                type: 'string',
                enum: Array(9) [
                  'auto-draft', 'pending', 'processing', 'on-hold', 'completed', 'cancelled', 'refunded', 'failed', 'checkout-draft',
                  
                ],
                required: false
              },
              currency: {
                description: 'Currency the order was created with, in ISO format.',
                type: 'string',
                enum: Array(163) [
                  'AED', 'AFN', 'ALL', 'AMD', 'ANG', 'AOA', 'ARS', 'AUD', 'AWG', 'AZN', 'BAM', 'BBD', 'BDT', 'BGN', 'BHD',
                  'BIF', 'BMD', 'BND', 'BOB', 'BRL', 'BSD', 'BTC', 'BTN', 'BWP', 'BYR', 'BYN', 'BZD', 'CAD', 'CDF', 'CHF',
                  'CLP', 'CNY', 'COP', 'CRC', 'CUC', 'CUP', 'CVE', 'CZK', 'DJF', 'DKK', 'DOP', 'DZD', 'EGP', 'ERN', 'ETB',
                  'EUR', 'FJD', 'FKP', 'GBP', 'GEL', 'GGP', 'GHS', 'GIP', 'GMD', 'GNF', 'GTQ', 'GYD', 'HKD', 'HNL', 'HRK',
                  'HTG', 'HUF', 'IDR', 'ILS', 'IMP', 'INR', 'IQD', 'IRR', 'IRT', 'ISK', 'JEP', 'JMD', 'JOD', 'JPY', 'KES',
                  'KGS', 'KHR', 'KMF', 'KPW', 'KRW', 'KWD', 'KYD', 'KZT', 'LAK', 'LBP', 'LKR', 'LRD', 'LSL', 'LYD', 'MAD',
                  'MDL', 'MGA', 'MKD', 'MMK', 'MNT', 'MOP', 'MRU', 'MUR', 'MVR', 'MWK', 
                  ...
                ],
                required: false
              },
              customer_id: { description: 'User ID who owns the order. 0 for guests.', type: 'integer', required: false },
              customer_note: { description: 'Note left by customer during checkout.', type: 'string', required: false },
              billing: {
                description: 'Billing address.',
                type: 'object',
                properties: {
                  first_name: { description: 'First name.', type: 'string', context: [ 'view', 'edit' ] },
                  last_name: { description: 'Last name.', type: 'string', context: [ 'view', 'edit' ] },
                  company: { description: 'Company name.', type: 'string', context: [ 'view', 'edit' ] },
                  address_1: { description: 'Address line 1', type: 'string', context: [ 'view', 'edit' ] },
                  address_2: { description: 'Address line 2', type: 'string', context: [ 'view', 'edit' ] },
                  city: { description: 'City name.', type: 'string', context: [ 'view', 'edit' ] },
                  state: {
                    description: 'ISO code or name of the state, province or district.',
                    type: 'string',
                    context: [ 'view', 'edit' ]
                  },
                  postcode: { description: 'Postal code.', type: 'string', context: [ 'view', 'edit' ] },
                  country: {
                    description: 'Country code in ISO 3166-1 alpha-2 format.',
                    type: 'string',
                    context: [ 'view', 'edit' ]
                  },
                  email: {
                    description: 'Email address.',
                    type: [ 'string', 'null' ],
                    format: 'email',
                    context: [ 'view', 'edit' ]
                  },
                  phone: { description: 'Phone number.', type: 'string', context: [ 'view', 'edit' ] }
                },
                required: false
              },
              shipping: {
                description: 'Shipping address.',
                type: 'object',
                properties: {
                  first_name: { description: 'First name.', type: 'string', context: [ 'view', 'edit' ] },
                  last_name: { description: 'Last name.', type: 'string', context: [ 'view', 'edit' ] },
                  company: { description: 'Company name.', type: 'string', context: [ 'view', 'edit' ] },
                  address_1: { description: 'Address line 1', type: 'string', context: [ 'view', 'edit' ] },
                  address_2: { description: 'Address line 2', type: 'string', context: [ 'view', 'edit' ] },
                  city: { description: 'City name.', type: 'string', context: [ 'view', 'edit' ] },
                  state: {
                    description: 'ISO code or name of the state, province or district.',
                    type: 'string',
                    context: [ 'view', 'edit' ]
                  },
                  postcode: { description: 'Postal code.', type: 'string', context: [ 'view', 'edit' ] },
                  country: {
                    description: 'Country code in ISO 3166-1 alpha-2 format.',
                    type: 'string',
                    context: [ 'view', 'edit' ]
                  }
                },
                required: false
              },
              payment_method: { description: 'Payment method ID.', type: 'string', required: false },
              payment_method_title: { description: 'Payment method title.', type: 'string', required: false },
              tra...